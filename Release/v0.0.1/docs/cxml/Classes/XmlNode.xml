<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<object kind="class" generator="appledoc v1.0.5">
    <name>XmlNode</name>
    <file>XmlNode.h</file>
    <base id="DMNode$EXTENSION">DMNode</base>
    <base>NSObject</base>
    <description>
        <brief>
            <para>
                <ref id="">XmlNode</ref>
                 is the main class used to represent nodes in the Document Model (DM) tree. </para>
        </brief>
        <details>
            <para>The <ref id="XmlParser$EXTENSION">XmlParser</ref>
                 and it's two delegates (<ref id="XmlSubtreeParserDelegate$EXTENSION">XmlSubtreeParserDelegate</ref>
                 and <ref id="XmlDocumentParserDelegate$EXTENSION">XmlDocumentParserDelegate</ref>
                ) will generate the whole DM using instances of this class. </para>
            <para>XmlNodes contain all the data required to restructure the xml representation of the object graph: <list>
                    <item>
                        <para>name </para>
                    </item>
                    <item>
                        <para>prefix </para>
                    </item>
                    <item>
                        <para>attributes </para>
                    </item>
                    <item>
                        <para>namespace declarations </para>
                    </item>
                    <item>
                        <para>sub elements which can be of any DMObject type. </para>
                    </item>
                </list>
                <ref id="">XmlNode</ref>
                 is also the main factory class of the DM, being about to create instances of itself as well as other nodes such as the <ref id="TextNode$EXTENSION">TextNode</ref>
                . </para>
        </details>
    </description>
    <sections>
        <section>
            <name></name>
            <member kind="instance-method">
                <name>initWithName:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)initWithName:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Creates a <ref id="">XmlNode</ref>
                             with just a name. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- initWithName:</selector>
            </member>
            <member kind="instance-method">
                <name>initWithName:prefix:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)initWithName:(NSString *)<parameter>aName</parameter>
                     prefix:(NSString *)<parameter>aPrefix</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Creates a <ref id="">XmlNode</ref>
                             with a name and namespace prefix. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- initWithName:prefix:</selector>
            </member>
        </section>
        <section>
            <name>Other</name>
            <member kind="property">
                <name>name</name>
                <type>NSString *</type>
                <prototype>@property NSString *name</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>The name of the <ref id="">XmlNode</ref>
                             as it would be printed in an xml stream. </para>
                    </brief>
                    <details>
                        <para>For example a name of "abc" would yeild this xml <example>
                                <code> &amp;lt;&lt;b>abc&lt;/b> /&amp;gt;</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>name</selector>
            </member>
            <member kind="property">
                <name>prefix</name>
                <type>NSString *</type>
                <prototype>@property NSString *prefix</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Schema prefix. </para>
                    </brief>
                    <details>
                        <para>For example <example>
                                <code> &amp;lt;&lt;b>soapenv&lt;/b>:Body /&amp;gt;</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>prefix</selector>
            </member>
            <member kind="property">
                <name>defaultSchema</name>
                <type>NSString *</type>
                <prototype>@property NSString *defaultSchema</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>The defaultSchema is a schema specified without a prefix. </para>
                    </brief>
                    <details>
                        <para>There can be only one of these for a <ref id="">XmlNode</ref>
                            . For example <example>
                                <code> &amp;lt;abc &lt;b>xmlns="http://defaultschema.com"&lt;/b> /&amp;gt;</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>defaultSchema</selector>
            </member>
        </section>
        <section>
            <name>Other</name>
            <member kind="instance-method">
                <name>isEqualsToName:</name>
                <type>BOOL</type>
                <prototype>- (BOOL)isEqualsToName:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Used during search loops to find child XmlNodes based on their names only. </para>
                    </brief>
                    <details>
                        <para>Obviously this only finds instances of <ref id="">XmlNode</ref>
                            . </para>
                    </details>
                </description>
                <selector>- isEqualsToName:</selector>
            </member>
            <member kind="instance-method">
                <name>xmlNodeWithName:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)xmlNodeWithName:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Locates and returns a <ref id="">XmlNode</ref>
                             based on it's name only. </para>
                    </brief>
                    <details>
                        <para>Again this will only find XmlNodes. </para>
                    </details>
                </description>
                <selector>- xmlNodeWithName:</selector>
            </member>
            <member kind="instance-method">
                <name>nodeAtIndex:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)nodeAtIndex:(int)<parameter>index</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Returns the DMObject at the specific index. </para>
                    </brief>
                    <details>
                        <para>This can return any type of DMObject. </para>
                    </details>
                </description>
                <selector>- nodeAtIndex:</selector>
            </member>
            <member kind="instance-method">
                <name>addNode:</name>
                <type>void</type>
                <prototype>- (void)addNode:(DMNode *)<parameter>element</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Adds a new child <ref id="DMNode$EXTENSION">DMNode</ref>
                             to the end of the list of sub elements. </para>
                    </brief>
                    <details>
                        <para>This is the main method for adding child nodes. If the passed node is a <ref id="TextNode$EXTENSION">TextNode</ref>
                             then it is just added to the nodesInOrder variable. if it's from the <ref id="">XmlNode</ref>
                             hirachy then it is also added to the nodesByName dictionary, however this will only happen if there is not a node already present with the specified name. In other words, this method will only index the first occurance of a <ref id="">XmlNode</ref>
                             with any give name. </para>
                    </details>
                </description>
                <selector>- addNode:</selector>
            </member>
            <member kind="instance-method">
                <name>addXmlNodeWithName:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)addXmlNodeWithName:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief></brief>
                    <details>
                        <para>Adds a new child <ref id="">XmlNode</ref>
                             to the end of the list of DMObjects. This first constructs an instance of <ref id="">XmlNode</ref>
                             and then passes it to the addXmlNode(XmlNode *) method. The returned <ref id="">XmlNode</ref>
                             is autoreleased. </para>
                    </details>
                </description>
                <seeAlso>
                    <item>
                        <ref id="#addXmlNode:">addXmlNode:</ref>
                    </item>
                </seeAlso>
                <selector>- addXmlNodeWithName:</selector>
            </member>
            <member kind="instance-method">
                <name>addXmlNodeWithName:prefix:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)addXmlNodeWithName:(NSString *)<parameter>aName</parameter>
                     prefix:(NSString *)<parameter>aPrefix</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Adds a new child <ref id="">XmlNode</ref>
                             to the end of the list of DMObjects. </para>
                    </brief>
                    <details>
                        <para>This first constructs an instance of <ref id="">XmlNode</ref>
                             and then passes it to the addXmlNode(XmlNode *) method. The returned <ref id="">XmlNode</ref>
                             is autoreleased. </para>
                    </details>
                </description>
                <seeAlso>
                    <item>
                        <ref id="#addXmlNode:">addXmlNode:</ref>
                    </item>
                </seeAlso>
                <selector>- addXmlNodeWithName:prefix:</selector>
            </member>
            <member kind="instance-method">
                <name>addXmlNodeWithName:value:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)addXmlNodeWithName:(NSString *)<parameter>aName</parameter>
                     value:(NSString *)<parameter>aValue</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Adds a new child <ref id="">XmlNode</ref>
                             to the end of the list of DMObjects. </para>
                    </brief>
                    <details>
                        <para>This first constructs an instance of <ref id="">XmlNode</ref>
                             and then passes it to the addXmlNode(XmlNode *) method. The returned <ref id="">XmlNode</ref>
                             is autoreleased. </para>
                    </details>
                </description>
                <seeAlso>
                    <item>
                        <ref id="#addXmlNode:">addXmlNode:</ref>
                    </item>
                </seeAlso>
                <selector>- addXmlNodeWithName:value:</selector>
            </member>
            <member kind="instance-method">
                <name>addXmlNodeWithName:prefix:value:</name>
                <type>XmlNode *</type>
                <prototype>- (XmlNode *)addXmlNodeWithName:(NSString *)<parameter>aName</parameter>
                     prefix:(NSString *)<parameter>aPrefix</parameter>
                     value:(NSString *)<parameter>aValue</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Adds a new child <ref id="">XmlNode</ref>
                             to the end of the list of DMObjects. </para>
                    </brief>
                    <details>
                        <para>This first constructs an instance of <ref id="">XmlNode</ref>
                             and then passes it to the addXmlNode(XmlNode *) method. The returned <ref id="">XmlNode</ref>
                             is autoreleased. </para>
                    </details>
                </description>
                <seeAlso>
                    <item>
                        <ref id="#addXmlNode:">addXmlNode:</ref>
                    </item>
                </seeAlso>
                <selector>- addXmlNodeWithName:prefix:value:</selector>
            </member>
            <member kind="instance-method">
                <name>hasXmlNodeWithName:</name>
                <type>BOOL</type>
                <prototype>- (BOOL)hasXmlNodeWithName:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>returns true if the current <ref id="">XmlNode</ref>
                             has a child <ref id="">XmlNode</ref>
                             with the specified name. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- hasXmlNodeWithName:</selector>
            </member>
            <member kind="instance-method">
                <name>nodes</name>
                <type>NSEnumerator *</type>
                <prototype>- (NSEnumerator *)nodes</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Returns a NSEnumerator which can be used to iteration through all the DMObjects. </para>
                    </brief>
                    <details>
                        <para>For example <example>
                                <code> for (DMObject * node in [aXmlNode <ref id="#nodes">- nodes</ref>
                                    ] {</code>
                                <code>    ... do your stuff here ...</code>
                                <code> }</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>- nodes</selector>
            </member>
            <member kind="instance-method">
                <name>xmlNodesWithName:</name>
                <type>NSEnumerator *</type>
                <prototype>- (NSEnumerator *)xmlNodesWithName:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Searches the child nodes for XmlNodes with the specific name and returns a new NSArray containing just those nodes. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- xmlNodesWithName:</selector>
            </member>
            <member kind="instance-method">
                <name>addNamespace:prefix:</name>
                <type>void</type>
                <prototype>- (void)addNamespace:(NSString *)<parameter>aUrl</parameter>
                     prefix:(NSString *)<parameter>aPrefix</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Adds a namespace and prefix to the current <ref id="">XmlNode</ref>
                            . </para>
                    </brief>
                    <details>
                        <para>This will manifest as a namespace declaration in any produced xml. For example: <example>
                                <code>
                                    <ref id="">XmlNode</ref>
                                     * node = [[<ref id="">XmlNode</ref>
                                     alloc] initWithName: @"abc"];</code>
                                <code> [node <ref id="#addNamespace">addNamespace</ref>
                                    : @"http://url.com" <ref id="#prefix">prefix</ref>
                                    : @"xyz"];</code>
                            </example>
                             Will result in: <example>
                                <code> &amp;lt;xyz:abc xlmns:xyz="http://url.com" /&amp;gt;</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>- addNamespace:prefix:</selector>
            </member>
            <member kind="instance-method">
                <name>namespaces</name>
                <type>NSEnumerator *</type>
                <prototype>- (NSEnumerator *)namespaces</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Returns an NSEnumerator which can be used to iterator through all the namespaces added to the current <ref id="">XmlNode</ref>
                            . </para>
                    </brief>
                    <details>
                        <para>For example <example>
                                <code> for (<ref id="XmlNamespace$EXTENSION">XmlNamespace</ref>
                                     * namespace in [aNode <ref id="#namespaces">- namespaces</ref>
                                    ] {</code>
                                <code>    ... do your stuff here ...</code>
                                <code> }</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>- namespaces</selector>
            </member>
            <member kind="instance-method">
                <name>setAttribute:value:</name>
                <type>void</type>
                <prototype>- (void)setAttribute:(NSString *)<parameter>aName</parameter>
                     value:(NSString *)<parameter>aValue</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Sets the name and value of an attribute. </para>
                    </brief>
                    <details>
                        <para>Here's an example <example>
                                <code>
                                    <ref id="">XmlNode</ref>
                                     * node = [[<ref id="">XmlNode</ref>
                                     alloc] initWithName: @"element"];</code>
                                <code> [node <ref id="#setAttribute">setAttribute</ref>
                                    : @"abc" <ref id="#value">- value</ref>
                                    : @"def"];</code>
                                <code> NSLog(@"%@", [node <ref id="#asXmlString">- asXmlString</ref>
                                    ]);</code>
                            </example>
                             Results in <example>
                                <code> &amp;lt;element abc="def" /&amp;gt;</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>- setAttribute:value:</selector>
            </member>
            <member kind="instance-method">
                <name>attributeValue:</name>
                <type>NSString *</type>
                <prototype>- (NSString *)attributeValue:(NSString *)<parameter>aName</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Returns the value for an attribute. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- attributeValue:</selector>
            </member>
            <member kind="instance-method">
                <name>attributes</name>
                <type>NSEnumerator *</type>
                <prototype>- (NSEnumerator *)attributes</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Returns a NSEnumerator which can be used to iterate through all attributes. </para>
                    </brief>
                    <details>
                        <para>For example <example>
                                <code> for (<ref id="">XmlNode</ref>
                                     * node in [aNode childNodes] {</code>
                                <code>    ... do your stuff here ...</code>
                                <code> }</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>- attributes</selector>
            </member>
            <member kind="instance-method">
                <name>value</name>
                <type>NSString *</type>
                <prototype>- (NSString *)value</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Shortcut method which returns the value of the first child <ref id="TextNode$EXTENSION">TextNode</ref>
                             or nil if there are no child TextNodes. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- value</selector>
            </member>
            <member kind="instance-method">
                <name>addTextNodeWithValue:</name>
                <type>TextNode *</type>
                <prototype>- (TextNode *)addTextNodeWithValue:(NSString *)<parameter>aValue</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Adds an additional <ref id="TextNode$EXTENSION">TextNode</ref>
                             to the list of child nodes. </para>
                    </brief>
                    <details>
                        <para>THis is the primary method for adding new text noes to the DM. Note: unlike setValue: this method does not clear the list of child Notes. It's primary purpose is for when loading an xml stream which may contain mixed content. The returned <ref id="TextNode$EXTENSION">TextNode</ref>
                             is autoreleased. </para>
                    </details>
                </description>
                <selector>- addTextNodeWithValue:</selector>
            </member>
            <member kind="instance-method">
                <name>setValue:</name>
                <type>void</type>
                <prototype>- (void)setValue:(NSString *)<parameter>value</parameter>
                </prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Short cut method which clears all current child elements and then adds a single <ref id="TextNode$EXTENSION">TextNode</ref>
                             containing the passed text. </para>
                    </brief>
                    <details>
                        <para>This method also returns void so that it fits the standard getter/setter pattern and therefore can be used in the shortcut form <example>
                                <code> aNode&lt;B>.value&lt;/b> = @"value";</code>
                            </example>
                        </para>
                    </details>
                </description>
                <selector>- setValue:</selector>
            </member>
            <member kind="instance-method">
                <name>asXmlString</name>
                <type>NSString *</type>
                <prototype>- (NSString *)asXmlString</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Generates the <ref id="">XmlNode</ref>
                             as a NSString. </para>
                    </brief>
                    <details>
                        <para>This is called when the client program needs to serialise the DM for sending to servers. </para>
                    </details>
                </description>
                <selector>- asXmlString</selector>
            </member>
            <member kind="instance-method">
                <name>asPrettyXmlString</name>
                <type>NSString *</type>
                <prototype>- (NSString *)asPrettyXmlString</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Effectively the same as asXmlString: however this "pretty prints" it which is useful for logging purposes where readibility of the xml is the primary factor. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- asPrettyXmlString</selector>
            </member>
            <member kind="instance-method">
                <name>countNodes</name>
                <type>int</type>
                <prototype>- (int)countNodes</prototype>
                <file>XmlNode.h</file>
                <description>
                    <brief>
                        <para>Returns the number of nodes within this node. </para>
                    </brief>
                    <details></details>
                </description>
                <selector>- countNodes</selector>
            </member>
        </section>
    </sections>
</object>